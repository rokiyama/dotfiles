[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
hook_add = '''
nnoremap <silent> <space>m  :<C-u>Denite file_mru<CR>
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = [ 'Denite', 'DeniteBufferDir' ]
hook_add = '''
nnoremap <silent> <space>f :<C-u>Denite buffer<CR>
nnoremap <silent> <space>r :<C-u>Denite file/rec<CR>
nnoremap <silent> <space>R :<C-u>DeniteBufferDir file/rec<CR>
nnoremap <silent> <space>c :<C-u>Denite -resume<CR>
nnoremap <silent> <space>g :<C-u>Denite grep<CR>
nnoremap <silent> <space>G :<C-u>DeniteBufferDir grep<CR>
nnoremap <silent> <space>l :<C-u>Denite line<CR>
nnoremap <silent> <space>h :<C-u>Denite help<CR>
'''
hook_source = '''
if executable('rg')
  call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git', '--hidden'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1', '-i'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
endif

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q       denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
  nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  "nnoremap <silent><buffer><expr> <C-n>   denite#do_map('move_to_next_line')
  "nnoremap <silent><buffer><expr> <C-p>   denite#do_map('move_to_previous_line')
  "nnoremap <silent><buffer><expr> <C-t>   denite#do_map('tabopen')
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-c> <Plug>(denite_filter_quit)
endfunction
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent> <space>t :<C-u>Defx -buffer-name=filer `expand('%:p:h')` -search=`expand('%:p')`<CR>
" nnoremap <silent> <space>T :<C-u>Defx -buffer-name=filer -split=vertical -winwidth=40 `expand('%:p:h')` -search=`expand('%:p')`<CR>
'''
hook_source = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>    defx#do_action('open')
  nnoremap <silent><buffer><expr> c       defx#do_action('copy')
  nnoremap <silent><buffer><expr> m       defx#do_action('move')
  nnoremap <silent><buffer><expr> p       defx#do_action('paste')
  nnoremap <silent><buffer><expr> l       defx#do_action('open')
  nnoremap <silent><buffer><expr> E       defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P       defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K       defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N       defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d       defx#do_action('remove_trash')
  nnoremap <silent><buffer><expr> r       defx#do_action('rename')
  nnoremap <silent><buffer><expr> x       defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> .       defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> h       defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~       defx#do_action('cd')
  nnoremap <silent><buffer><expr> q       defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *       defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j       line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k       line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>   defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>   defx#do_action('print')
  nnoremap <silent><buffer><expr> <Tab>   winnr('$') != 1 ?\ ':<C-u>wincmd w<CR>' : ':<C-u>Defx -new -split=vertical<CR>'
endfunction
'''

[[plugins]]
repo = 'Shougo/unite-help'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'denite.nvim'
hook_add = '''
nnoremap <silent> <space>o  :<C-u>Denite -winwidth=40 -mode=normal -split=vertical -no-quit outline<CR>
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = [ 'NERDTree', 'NERDTreeToggle' ]
hook_add = '''
nnoremap <silent> <space>T :<C-u>NERDTreeToggle %:h<CR>
'''

#[[plugins]]
#repo = 'szw/vim-tags'
#on_cmd = 'TagsGenerate'

#[[plugins]]
#repo = 'easymotion/vim-easymotion'
#on_map = '<Plug>'

#[[plugins]]
#repo = 'tpope/vim-endwise'
#on_ft = 'ruby'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
noremap <space>q :QuickRun -outputter/buffer/split ":botright 8sp"<CR>
noremap <space>Q :QuickRun -outputter/buffer/split ":botright 8sp" -type<space>
let g:quickrun_config = {
      \   '_': {
      \   },
      \   'markdown': {
      \     'type': 'pandoc',
      \     'outputter': 'browser'
      \   },
      \   'asciidoc': {
      \     'command': 'asciidoctor',
      \     'exec': '%c -o- %o %s %a',
      \     'outputter': 'browser'
      \   },
      \ }
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_source = 'vim-quickrun'
on_cmd = 'OpenBrowser'

#[[plugins]]
#repo = 'hail2u/vim-css3-syntax'
#on_ft = 'css'

#[[plugins]]
#repo = 'othree/html5.vim'
#on_ft = 'html'

#[[plugins]]
#repo = 'pangloss/vim-javascript'
#on_ft = 'javascript'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'dzeban/vim-log-syntax'
on_ft = 'log'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vip,a)
vmap <space>a <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. ,aip)
nmap <space>a <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'Konfekt/FastFold'
on_path = '.*'

[[plugins]]
repo = 'https://raw.githubusercontent.com/mono0x/dotfiles/master/.vim/syntax/nodoka.vim'
script_type = 'syntax'
on_ft = 'nodoka'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
let g:go_fmt_command = "goimports"
'''

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = 'help'
on_map = 'K'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'
depends = 'deoplete.nvim'

[[plugins]]
repo = 'jparise/vim-graphql'
on_ft = 'graphql'
